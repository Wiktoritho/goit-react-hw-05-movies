{"version":3,"file":"static/js/178.ccc66c32.chunk.js","mappings":"uQAIMA,EAASC,EAAAA,GAAAA,GACTC,EAAUD,EAAAA,GAAAA,GCJhB,OAAgB,OAAS,qBAAqB,KAAO,mBAAmB,SAAW,wB,SCIpE,SAASE,IACtB,IACAC,EFAa,SAAwBC,GACrC,IAAAC,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GA4BtB,OA1BAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAClBxB,EAAQ,CAADsB,EAAAE,KAAA,QACI,OAAdlB,EAAU,IAAIgB,EAAAG,OAAA,iBAIG,OAAnBf,GAAa,GAAMY,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEME,EAAAA,EAAAA,IAAU,GAADC,OAC3B9B,EAAO,UAAA8B,OAAS3B,EAAO,qBAAA2B,OAAoBhC,EAAM,oBACpD,KAAD,EACuB,OAHlB0B,EAAQC,EAAAM,MAGDC,OACXvB,EAAUe,EAASS,KAAKC,MAExBjB,EAAS,gCACVQ,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEDR,EAASQ,EAAAU,GAAIC,SAAS,QAExBvB,GAAa,GAAO,yBAAAY,EAAAY,OAAA,GAAAd,EAAA,mBACrB,kBApBqB,OAAAH,EAAAkB,MAAA,KAAAC,UAAA,KAsBtBpB,GACF,GAAG,CAAChB,IAEG,CAAEK,OAAAA,EAAQI,UAAAA,EAAWI,MAAAA,EAC9B,CEhCuCwB,EADjBC,EAAAA,EAAAA,MAAZtC,SACAK,EAAMN,EAANM,OAAQI,EAASV,EAATU,UAAWI,EAAKd,EAALc,MAErB0B,EAAY,IAAIC,IAUhBC,EAAkBpC,GAAUA,EAAOqC,KARd,SAACC,GAK1B,OAJIJ,EAAUK,IAAID,EAAME,MACtBF,EAAME,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,WAE7BT,EAAUU,IAAIN,EAAME,IACbF,CACT,IAIA,OAAIlC,GACKyC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAGVtC,GACKuC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,UAAQtC,KAGjB4B,GAA8C,IAA3BA,EAAgBY,QAKtCD,EAAAA,EAAAA,MAAAE,EAAAA,SAAA,CAAAH,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAIK,UAAWC,EAAAA,OAAWL,SAAC,YAC3BD,EAAAA,EAAAA,KAAA,MAAIK,UAAWC,EAAAA,KAASL,SACrBV,EAAgBC,KAAI,SAACC,GAAK,OACzBS,EAAAA,EAAAA,MAAA,MAAmBG,UAAWC,EAAAA,SAAaL,SAAA,CACxCR,EAAMc,KAAK,OAAKd,EAAMe,YADhBf,EAAME,GAEV,UAVJK,EAAAA,EAAAA,KAAA,OAAAC,SAAK,mCAehB,C","sources":["hooks/fetchMovieActors.js","webpack://goit-react-hw-05-movies/./src/pages/movieDetails/cast/Cast.module.css?e625","pages/movieDetails/cast/Cast.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiData from \"../data/apiData.json\";\n\nconst apiKey = apiData[0].apiKey;\nconst baseUrl = apiData[0].baseUrl;\n\nexport default function useMovieActors(movieId) {\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieActors = async () => {\n      if (!movieId) {\n        setActors([]);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        const response = await axios.get(\n          `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n        );\n        if (response.status === 200) {\n          setActors(response.data.cast);\n        } else {\n          setError(\"Error fetching movie actors.\");\n        }\n      } catch (err) {\n        setError(err.message);\n      }\n      setIsLoading(false);\n    };\n\n    fetchMovieActors();\n  }, [movieId]);\n\n  return { actors, isLoading, error };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Cast_header__a+MSu\",\"list\":\"Cast_list__pb9Bg\",\"listItem\":\"Cast_listItem__EVYY0\"};","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useMovieActors from \"../../../hooks/fetchMovieActors\";\nimport css from \"./Cast.module.css\";\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const { actors, isLoading, error } = useMovieActors(movieId);\n\n  const uniqueIds = new Set();\n\n  const handleDuplicateIds = (actor) => {\n    if (uniqueIds.has(actor.id)) {\n      actor.id = Math.floor(Math.random() * 1000000);\n    }\n    uniqueIds.add(actor.id);\n    return actor;\n  };\n\n  const processedActors = actors && actors.map(handleDuplicateIds);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!processedActors || processedActors.length === 0) {\n    return <div>No actors found for this movie.</div>;\n  }\n\n  return (\n    <>\n      <h1 className={css.header}>Actors</h1>\n      <ul className={css.list}>\n        {processedActors.map((actor) => (\n          <li key={actor.id} className={css.listItem}>\n            {actor.name} as {actor.character}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n"],"names":["apiKey","apiData","baseUrl","Cast","_useMovieActors","movieId","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchMovieActors","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","abrupt","axios","concat","sent","status","data","cast","t0","message","stop","apply","arguments","useMovieActors","useParams","uniqueIds","Set","processedActors","map","actor","has","id","Math","floor","random","add","_jsx","children","_jsxs","length","_Fragment","className","css","name","character"],"sourceRoot":""}